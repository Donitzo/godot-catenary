[gd_resource type="Shader" format=2]

[resource]
code = "/*
    Asset: Godot Dynamic Catenary
    File: catenary.tres
    Description: Shader for rendering hanging and swinging catenaries
                 Based on algorithms from https://www.alanzucconi.com/2020/12/13/catenary-2/
    Instructions: This shader is best initialized by the catenary.gd script.
    Repository: https://github.com/Donitzo/godot-catenary
    License: MIT License
*/

shader_type spatial;
render_mode skip_vertex_transform; // Add additional render modes as needed.

const float PI = 3.14159265359;

// The mesh min-max x
uniform vec2 minmax_x = vec2(0.0, 1.0);

// The start and end points
uniform vec3 p0;
uniform vec3 p1;

// The \"a\", \"p\" and \"q\" parameters
uniform vec3 apq;

// The arc length of the catenary
uniform float arc_length;

// Whether to flip the mesh x-axis
uniform float flip_x = 0.0;

// The scale multiplier of the mesh yz-axes
uniform float width = 1.0;

// The catenary swing start phase
uniform float swing_phase_offset = 0.0;

// The catenary swing angle in radians
uniform float swing_angle = 0.5;

// The catenary swing frequency
uniform float swing_frequency = 1.0;

void vertex() {
    // Calculate the delta, side direction and length vectors
    vec3 shift = p1 - p0;
    vec3 side = normalize(vec3(-shift.z, 0.0, shift.x));
    float l = length(shift.xz);

    // Map local x to world x and calculate curve horizontal t between 0 to 1
    // Formula derived from: S(t) = a * (sinh((x - p) / a) - sinh(-p / a))
    float lx = mix((VERTEX.x - minmax_x.x) / (minmax_x.y - minmax_x.x), 
        1.0 - (VERTEX.x - minmax_x.x) / (minmax_x.y - minmax_x.x), flip_x);
    float wx = (apq.x * asinh(lx * arc_length / apq.x - sinh(apq.y / apq.x)) + apq.y);
    float t = wx / l;
    
    // Estimate catenary height at two points along the curve
    float tf = t + 0.01;
    float y0 = apq.x * cosh((t * l - apq.y) / apq.x) + apq.z;
    float y1 = apq.x * cosh((tf * l - apq.y) / apq.x) + apq.z;
    
    // Calculate catenary sag
    float sag = y0 - shift.y * t;

    // Calculate swing offset
    float wave = sin(PI * swing_frequency * TIME + swing_phase_offset);
    float swing_xz = sin(wave * swing_angle * 0.5) * sag;
    float swing_y = cos(wave * swing_angle * 0.5) * sag;
    vec3 swing = vec3(swing_xz * side.x, swing_y, swing_xz * side.z);
    
    // Calculate the curve position at two points
    vec3 c0 = vec3(shift.x * t, y0, shift.z * t);
    vec3 c1 = vec3(shift.x * tf, y1, shift.z * tf);

    // Calculate the forward and up vectors
    vec3 forward = normalize(vec3(c1 - c0));
    vec3 up = cross(side, forward);

    // Calculate vertex world position around the catenary position
    vec2 xz = side.xz * VERTEX.z * width * (1.0 - flip_x * 2.0);
    vec3 world = c0 + p0 + swing + vec3(xz.x, 0, xz.y) + up * VERTEX.y * width;

    // Transform from world space to view space
    VERTEX = (INV_CAMERA_MATRIX * vec4(world, 1.0)).xyz;
}

// These are uniforms and a fragment shader based on the default Godot spatial material
// Everything below this point can be replaced safely based on needs

uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float alpha_scissor_threshold;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_white;
uniform sampler2D texture_roughness : hint_white;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);

void fragment() {
    vec4 albedo_tex = texture(texture_albedo, UV);
    ALBEDO = albedo_tex.rgb * albedo.rgb;
    METALLIC = texture(texture_metallic, UV).r * metallic;
    ROUGHNESS = texture(texture_roughness, UV).r * roughness;
    SPECULAR = specular;
    NORMALMAP = texture(texture_normal, UV).rgb;
    NORMALMAP_DEPTH = normal_scale;
    EMISSION = (texture(texture_emission, UV).rgb + emission.rgb) * emission_energy;
    ALPHA = albedo_tex.a * albedo.a;
    ALPHA_SCISSOR = alpha_scissor_threshold;
}"
